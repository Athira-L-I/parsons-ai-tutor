name: Deploy Backend to DigitalOcean

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy backend files to Droplet
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: 'backend/'
          target: '/home/parsons/'
          strip_components: 1
          overwrite: true
          rm: false

      - name: Deploy and restart service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            set -e  # Exit on any error
            
            echo "üöÄ Starting deployment..."
            cd /home/parsons/

            # Create data directory if it doesn't exist
            mkdir -p data/

            # Stop existing service (handle exit codes properly)
            echo "Stopping existing service..."
            if pgrep -f "python.*main.py" > /dev/null; then
              echo "Found running Python service, stopping it..."
              pkill -f "python.*main.py" && echo "Service stopped successfully" || true
              sleep 5
              
              # Force kill if still running
              if pgrep -f "python.*main.py" > /dev/null; then
                echo "Force killing stubborn processes..."
                pkill -9 -f "python.*main.py" || true
                sleep 2
              fi
            else
              echo "No running Python service found"
            fi

            # Verify no Python processes are running
            if pgrep -f "python.*main.py" > /dev/null; then
              echo "‚ùå Failed to stop existing service"
              exit 1
            else
              echo "‚úÖ All Python services stopped"
            fi

            # Clean Python environment
            echo "Cleaning environment..."
            rm -rf venv/
            rm -rf __pycache__/
            find . -name "*.pyc" -delete 2>/dev/null || true

            # Create fresh virtual environment
            echo "Creating virtual environment..."
            python3 -m venv venv
            source venv/bin/activate

            # Verify virtual environment is active
            if [[ "$VIRTUAL_ENV" != "" ]]; then
              echo "‚úÖ Virtual environment activated: $VIRTUAL_ENV"
            else
              echo "‚ùå Failed to activate virtual environment"
              exit 1
            fi

            # Upgrade pip
            echo "Upgrading pip..."
            python -m pip install --upgrade pip

            # Install dependencies
            echo "Installing dependencies..."
            if pip install --no-cache-dir -r requirements.txt; then
              echo "‚úÖ Dependencies installed successfully"
            else
              echo "‚ùå Failed to install dependencies"
              exit 1
            fi

            # Verify problems.json exists
            if [ -f "data/problems.json" ]; then
              echo "‚úÖ problems.json found"
              if command -v jq &> /dev/null; then
                problem_count=$(jq length data/problems.json 2>/dev/null || echo "unknown")
                echo "üìä Problems count: $problem_count"
              else
                echo "üìä Problems file exists (jq not available for counting)"
              fi
            else
              echo "‚ùå problems.json not found!"
              echo "üìÅ Contents of current directory:"
              ls -la
              echo "üìÅ Contents of data directory:"
              ls -la data/ || echo "data/ directory doesn't exist"
            fi

            # Verify installation
            echo "Verifying installation..."
            if python -c "import fastapi, pydantic, openai; print('‚úÖ All packages imported successfully')"; then
              echo "‚úÖ Package verification passed"
            else
              echo "‚ùå Package verification failed"
              exit 1
            fi

            # Create environment file
            echo "Setting up environment..."
            cat > .env << 'EOF'
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            ENVIRONMENT=production
            PORT=8000
            HOST=0.0.0.0
            EOF

            # Test if main.py can be imported
            echo "Testing main.py import..."
            if python -c "import main; print('‚úÖ main.py imports successfully')"; then
              echo "‚úÖ Application import test passed"
            else
              echo "‚ùå Application import test failed"
              echo "=== Error details ==="
              python -c "import main" 2>&1 || true
              exit 1
            fi

            # Start service
            echo "Starting service..."
            nohup python main.py > server.log 2>&1 &
            SERVICE_PID=$!
            echo "Started service with PID: $SERVICE_PID"

            # Wait for service to initialize
            echo "Waiting for service to initialize..."
            sleep 15

            # Verify service started
            if pgrep -f "python.*main.py" > /dev/null; then
              echo "‚úÖ Service started successfully"
              
              # Test health endpoint
              echo "Testing health endpoint..."
              if curl -f http://localhost:8000/health 2>/dev/null; then
                echo "‚úÖ Health check passed"
              else
                echo "‚ö†Ô∏è Health check failed but service is running"
                echo "=== Recent server logs ==="
                tail -10 server.log
              fi
              
              # Test problems endpoint
              echo "Testing problems endpoint..."
              if curl -f http://localhost:8000/api/problems 2>/dev/null | head -100; then
                echo "‚úÖ Problems API responding"
              else
                echo "‚ö†Ô∏è Problems API not responding"
                echo "=== Recent server logs ==="
                tail -10 server.log
              fi
            else
              echo "‚ùå Service failed to start"
              echo "=== Full server logs ==="
              cat server.log
              exit 1
            fi

            echo "üéâ Deployment completed successfully!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed! Check the logs above for details."
