name: Deploy Backend to DigitalOcean

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy backend files to Droplet
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: 'backend/*'
          target: '/home/parsons/backend/'
          strip_components: 1
          overwrite: true
          rm: false

      - name: Deploy and restart service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          command_timeout: 5m
          script: |
            cd /home/parsons/backend

            # Stop parsons service
            echo "Stopping parsons service..."
            systemctl stop parsons || true

            # Kill any processes using port 8000
            echo "Killing processes on port 8000..."
            lsof -ti:8000 | xargs kill -9 2>/dev/null || true
            
            # Alternative: kill by process name
            pkill -9 -f "gunicorn.*main:app" || true
            pkill -9 -f "uvicorn.*main:app" || true
            pkill -9 -f "python.*main.py" || true

            # Wait for processes to die
            sleep 5

            # Verify port is free
            if lsof -Pi :8000 -sTCP:LISTEN -t >/dev/null; then
              echo "❌ Port 8000 still in use"
              lsof -Pi :8000 -sTCP:LISTEN
              exit 1
            else
              echo "✅ Port 8000 is free"
            fi

            # Backup sessions before updating
            if [ -d "data/sessions" ]; then
              echo "✅ Sessions exist, keeping them safe"
            fi

            # Update dependencies
            echo "Installing dependencies..."
            source venv/bin/activate
            pip install -r requirements.txt --quiet

            # Create/update environment file
            cat > .env << 'EOF'
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            PORT=8000
            ENVIRONMENT=production
            EOF

            # Start service
            echo "Starting parsons service..."
            systemctl start parsons

            # Wait and check status
            sleep 10
            if systemctl is-active --quiet parsons; then
              echo "✅ Service started successfully"
              systemctl status parsons --no-pager
              
              # Test API
              if curl -f http://localhost:8000/api/problems > /dev/null 2>&1; then
                echo "✅ API responding"
              else
                echo "⚠️ API not responding yet"
              fi
            else
              echo "❌ Service failed to start"
              systemctl status parsons --no-pager
              journalctl -xeu parsons.service --no-pager -n 20
              exit 1
            fi
