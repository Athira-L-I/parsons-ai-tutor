[  
  {
    "id": "demo-problem-1",
    "title": "Print Even Numbers in a Range",
    "description": "Write code that prints all even numbers from a given start to end value using a for loop and conditional check.",
    "difficulty": "medium",
    "tags": [
      "python",
      "generated"
    ],
    "parsonsSettings": {
      "initial": "start = 1, end = 10\nfor i in range(start, end + 1):\n    if i % 2 == 0:\n        print(i)",
      "options": {
        "sortableId": "sortable",
        "trashId": "sortableTrash",
        "max_wrong_lines": 3,
        "grader": "ParsonsWidget._graders.LineBasedGrader",
        "can_indent": true,
        "x_indent": 50,
        "exec_limit": 2500,
        "feedback_cb": true,
        "show_feedback": true
      }
    },
    "createdAt": "2025-04-23T14:45:17.677088",
    "updatedAt": "2025-04-23T14:45:17.677088"
  },
  {
      "id": "polygon_draw_square",
      "title": "Draw a Square",
      "description": "Create a simple program that draws a square by moving forward 100 units and turning right 90 degrees four times.",
      "difficulty": "easy",
      "tags": ["python", "loops", "polygonmakerLab"],
      "parsonsSettings": {
        "initial": "for i in range(4):\n    move_forward(100)\n    turn_right(90)",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "polygon_draw_any",
      "title": "Draw Any Polygon",
      "description": "Write a program that draws any polygon by accepting the number of sides as input. Calculate the turn angle as 360 divided by the number of sides.",
      "difficulty": "medium",
      "tags": ["python", "loops", "math", "polygonmakerLab"],
      "parsonsSettings": {
        "initial": "num_sides = int(input('Number of sides: '))\nside_length = 100\nangle = 360 / num_sides\nfor i in range(num_sides):\n    move_forward(side_length)\n    turn_right(angle)",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "squiral_draw",
      "title": "Draw a Squiral Pattern",
      "description": "Create a spiraling pattern by starting with step_size = 1, then in each loop iteration move forward by step_size, turn right 89 degrees, and increment step_size by 1. Repeat 100 times.",
      "difficulty": "medium",
      "tags": ["python", "loops", "variables", "squiralHW"],
      "parsonsSettings": {
        "initial": "step_size = 1\nfor i in range(100):\n    move_forward(step_size)\n    turn_right(89)\n    step_size = step_size + 1",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "guess_game_basic",
      "title": "Guessing Game - Computer Guesses",
      "description": "Write a program where the computer picks a random number between 1 and 10, then repeatedly asks the user to guess until they get it right. Tell the user if their guess is too high, too low, or correct.",
      "difficulty": "medium",
      "tags": ["python", "loops", "conditionals", "random", "guess1Lab"],
      "parsonsSettings": {
        "initial": "import random\nprint('Welcome to the Guessing Game!')\nname = input('What is your name? ')\nprint(f'Hello {name}!')\nsecret = random.randint(1, 10)\nwhile True:\n    guess = int(input('Guess a number: '))\n    if guess == secret:\n        print('You got it right!')\n        break\n    elif guess < secret:\n        print('Too low, try again')\n    else:\n        print('Too high, try again')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "guess_game_custom_range",
      "title": "Guessing Game - Custom Range with Counter",
      "description": "Expand the guessing game to allow the user to set the minimum and maximum values for the random number. Keep track of the number of guesses and report it when the user wins.",
      "difficulty": "medium",
      "tags": ["python", "loops", "conditionals", "counters", "guess2HW"],
      "parsonsSettings": {
        "initial": "import random\nmin_num = int(input('Enter minimum number: '))\nmax_num = int(input('Enter maximum number: '))\nsecret = random.randint(min_num, max_num)\nguesses = 0\nwhile True:\n    guess = int(input('Guess: '))\n    guesses = guesses + 1\n    if guess == secret:\n        print(f'Correct! You took {guesses} guesses.')\n        break\n    elif guess < secret:\n        print('Too low')\n    else:\n        print('Too high')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "guess_game_sprite_guesses",
      "title": "Guessing Game - Sprite Guesses",
      "description": "Create a program where the user picks a secret number and the sprite guesses it. The sprite should ask for min and max values, then keep guessing randomly without repeating any guess. Store all guesses in a list and check if a guess was already made.",
      "difficulty": "hard",
      "tags": ["python", "loops", "lists", "conditionals", "guess3Lab"],
      "parsonsSettings": {
        "initial": "import random\nmin_num = int(input('Enter min number: '))\nmax_num = int(input('Enter max number: '))\nprint(f'Think of a number between {min_num} and {max_num}')\nguesses = []\nwhile True:\n    guess = random.randint(min_num, max_num)\n    if guess not in guesses:\n        guesses.append(guess)\n        response = input(f'Is it {guess}? (yes/no/higher/lower): ')\n        if response == 'yes':\n            print(f'I got it in {len(guesses)} guesses!')\n            break",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "count_to_n",
      "title": "Count from 1 to N",
      "description": "Write a program that asks the user for a number N, then prints all numbers from 1 to N using a loop.",
      "difficulty": "easy",
      "tags": ["python", "loops", "input"],
      "parsonsSettings": {
        "initial": "n = int(input('Count to: '))\nfor i in range(1, n + 1):\n    print(i)",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "sum_numbers",
      "title": "Sum Numbers from 1 to N",
      "description": "Write a program that calculates and prints the sum of all numbers from 1 to N. Ask the user for N.",
      "difficulty": "easy",
      "tags": ["python", "loops", "arithmetic"],
      "parsonsSettings": {
        "initial": "n = int(input('Sum from 1 to: '))\ntotal = 0\nfor i in range(1, n + 1):\n    total = total + i\nprint(f'Sum is: {total}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "multiplication_table",
      "title": "Print Multiplication Table",
      "description": "Write a program that asks for a number and prints its multiplication table from 1 to 10.",
      "difficulty": "easy",
      "tags": ["python", "loops", "multiplication"],
      "parsonsSettings": {
        "initial": "num = int(input('Multiplication table for: '))\nfor i in range(1, 11):\n    result = num * i\n    print(f'{num} x {i} = {result}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "even_odd_check",
      "title": "Check If Number Is Even or Odd",
      "description": "Write a program that asks the user for a number and prints whether it is even or odd.",
      "difficulty": "easy",
      "tags": ["python", "conditionals", "modulo"],
      "parsonsSettings": {
        "initial": "num = int(input('Enter a number: '))\nif num % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "count_even_numbers",
      "title": "Count Even Numbers in Range",
      "description": "Write a program that counts how many even numbers exist from 1 to N (user input).",
      "difficulty": "medium",
      "tags": ["python", "loops", "conditionals", "counters"],
      "parsonsSettings": {
        "initial": "n = int(input('Count evens up to: '))\ncount = 0\nfor i in range(1, n + 1):\n    if i % 2 == 0:\n        count = count + 1\nprint(f'Even numbers: {count}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "find_max",
      "title": "Find Maximum of Three Numbers",
      "description": "Ask the user for three numbers and print the largest one using conditionals.",
      "difficulty": "medium",
      "tags": ["python", "conditionals", "comparison"],
      "parsonsSettings": {
        "initial": "a = int(input('Number 1: '))\nb = int(input('Number 2: '))\nc = int(input('Number 3: '))\nif a >= b and a >= c:\n    print(f'Max is: {a}')\nelif b >= a and b >= c:\n    print(f'Max is: {b}')\nelse:\n    print(f'Max is: {c}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "factorial",
      "title": "Calculate Factorial",
      "description": "Write a program that calculates the factorial of a number. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.",
      "difficulty": "medium",
      "tags": ["python", "loops", "arithmetic"],
      "parsonsSettings": {
        "initial": "n = int(input('Calculate factorial of: '))\nresult = 1\nfor i in range(1, n + 1):\n    result = result * i\nprint(f'{n}! = {result}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "temperature_converter",
      "title": "Convert Celsius to Fahrenheit",
      "description": "Ask the user for a temperature in Celsius and convert it to Fahrenheit using the formula: F = (C * 9/5) + 32.",
      "difficulty": "easy",
      "tags": ["python", "arithmetic", "formulas"],
      "parsonsSettings": {
        "initial": "celsius = float(input('Temperature in Celsius: '))\nfahrenheit = (celsius * 9/5) + 32\nprint(f'{celsius}°C = {fahrenheit}°F')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "student_grade",
      "title": "Determine Letter Grade",
      "description": "Ask for a student's score (0-100) and print their letter grade: A (90+), B (80+), C (70+), D (60+), F (below 60).",
      "difficulty": "medium",
      "tags": ["python", "conditionals", "ranges"],
      "parsonsSettings": {
        "initial": "score = int(input('Enter score: '))\nif score >= 90:\n    print('Grade: A')\nelif score >= 80:\n    print('Grade: B')\nelif score >= 70:\n    print('Grade: C')\nelif score >= 60:\n    print('Grade: D')\nelse:\n    print('Grade: F')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "password_validator",
      "title": "Simple Password Validator",
      "description": "Ask the user to enter a password. Keep asking until they enter the correct password (correct = 'secret123'). Count how many attempts they made.",
      "difficulty": "medium",
      "tags": ["python", "loops", "conditionals", "counters"],
      "parsonsSettings": {
        "initial": "attempts = 0\nwhile True:\n    password = input('Enter password: ')\n    attempts = attempts + 1\n    if password == 'secret123':\n        print(f'Correct! Attempts: {attempts}')\n        break\n    else:\n        print('Wrong password, try again')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "list_average",
      "title": "Calculate Average of Numbers",
      "description": "Ask the user how many numbers they want to enter, then ask for each number and calculate the average.",
      "difficulty": "medium",
      "tags": ["python", "loops", "lists", "arithmetic"],
      "parsonsSettings": {
        "initial": "count = int(input('How many numbers? '))\ntotal = 0\nfor i in range(count):\n    num = int(input('Enter number: '))\n    total = total + num\naverage = total / count\nprint(f'Average: {average}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "fibonacci_sequence",
      "title": "Print Fibonacci Sequence",
      "description": "Print the first N numbers in the Fibonacci sequence (where each number is the sum of the two previous: 0, 1, 1, 2, 3, 5, 8, ...).",
      "difficulty": "hard",
      "tags": ["python", "loops", "variables", "sequences"],
      "parsonsSettings": {
        "initial": "n = int(input('How many Fibonacci numbers? '))\na = 0\nb = 1\nfor i in range(n):\n    print(a)\n    next_num = a + b\n    a = b\n    b = next_num",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "prime_checker",
      "title": "Check If Number Is Prime",
      "description": "Ask the user for a number and determine if it is prime (only divisible by 1 and itself).",
      "difficulty": "hard",
      "tags": ["python", "loops", "conditionals", "modulo"],
      "parsonsSettings": {
        "initial": "num = int(input('Check if prime: '))\nis_prime = True\nfor i in range(2, num):\n    if num % i == 0:\n        is_prime = False\n        break\nif is_prime and num > 1:\n    print('Prime')\nelse:\n    print('Not prime')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "list_operations",
      "title": "Find Min and Max in List",
      "description": "Ask the user to enter 5 numbers into a list, then find and print the minimum and maximum values.",
      "difficulty": "medium",
      "tags": ["python", "lists", "loops", "comparisons"],
      "parsonsSettings": {
        "initial": "numbers = []\nfor i in range(5):\n    num = int(input('Enter number: '))\n    numbers.append(num)\nmin_val = numbers[0]\nmax_val = numbers[0]\nfor num in numbers:\n    if num < min_val:\n        min_val = num\n    if num > max_val:\n        max_val = num\nprint(f'Min: {min_val}, Max: {max_val}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "nested_loops_grid",
      "title": "Print a Number Grid",
      "description": "Print a 3x3 grid where each cell contains the product of its row and column numbers (starting from 1).",
      "difficulty": "medium",
      "tags": ["python", "nested_loops", "multiplication"],
      "parsonsSettings": {
        "initial": "for row in range(1, 4):\n    for col in range(1, 4):\n        product = row * col\n        print(product, end=' ')\n    print()",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "string_repeater",
      "title": "Repeat String N Times",
      "description": "Ask the user for a string and a number N, then print that string N times on separate lines.",
      "difficulty": "easy",
      "tags": ["python", "loops", "strings"],
      "parsonsSettings": {
        "initial": "text = input('Enter text: ')\ntimes = int(input('Repeat how many times? '))\nfor i in range(times):\n    print(text)",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "countdown_timer",
      "title": "Countdown from N to 0",
      "description": "Ask the user for a number N and print a countdown from N down to 0.",
      "difficulty": "easy",
      "tags": ["python", "loops", "countdown"],
      "parsonsSettings": {
        "initial": "n = int(input('Countdown from: '))\nfor i in range(n, -1, -1):\n    print(i)",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "count_to_n",
      "title": "Count from 1 to N",
      "description": "Write a program that asks the user for a number N, then prints all numbers from 1 to N using a loop.",
      "difficulty": "easy",
      "tags": ["python", "loops", "input"],
      "parsonsSettings": {
        "initial": "n = int(input('Count to: '))\nfor i in range(1, n + 1):\n    print(i)",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "sum_numbers",
      "title": "Sum Numbers from 1 to N",
      "description": "Write a program that calculates and prints the sum of all numbers from 1 to N. Ask the user for N.",
      "difficulty": "easy",
      "tags": ["python", "loops", "arithmetic"],
      "parsonsSettings": {
        "initial": "n = int(input('Sum from 1 to: '))\ntotal = 0\nfor i in range(1, n + 1):\n    total = total + i\nprint(f'Sum is: {total}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "multiplication_table",
      "title": "Print Multiplication Table",
      "description": "Write a program that asks for a number and prints its multiplication table from 1 to 10.",
      "difficulty": "easy",
      "tags": ["python", "loops", "multiplication"],
      "parsonsSettings": {
        "initial": "num = int(input('Multiplication table for: '))\nfor i in range(1, 11):\n    result = num * i\n    print(f'{num} x {i} = {result}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "even_odd_check",
      "title": "Check If Number Is Even or Odd",
      "description": "Write a program that asks the user for a number and prints whether it is even or odd.",
      "difficulty": "easy",
      "tags": ["python", "conditionals", "modulo"],
      "parsonsSettings": {
        "initial": "num = int(input('Enter a number: '))\nif num % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "count_even_numbers",
      "title": "Count Even Numbers in Range",
      "description": "Write a program that counts how many even numbers exist from 1 to N (user input).",
      "difficulty": "medium",
      "tags": ["python", "loops", "conditionals", "counters"],
      "parsonsSettings": {
        "initial": "n = int(input('Count evens up to: '))\ncount = 0\nfor i in range(1, n + 1):\n    if i % 2 == 0:\n        count = count + 1\nprint(f'Even numbers: {count}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "find_max",
      "title": "Find Maximum of Three Numbers",
      "description": "Ask the user for three numbers and print the largest one using conditionals.",
      "difficulty": "medium",
      "tags": ["python", "conditionals", "comparison"],
      "parsonsSettings": {
        "initial": "a = int(input('Number 1: '))\nb = int(input('Number 2: '))\nc = int(input('Number 3: '))\nif a >= b and a >= c:\n    print(f'Max is: {a}')\nelif b >= a and b >= c:\n    print(f'Max is: {b}')\nelse:\n    print(f'Max is: {c}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "factorial",
      "title": "Calculate Factorial",
      "description": "Write a program that calculates the factorial of a number. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.",
      "difficulty": "medium",
      "tags": ["python", "loops", "arithmetic"],
      "parsonsSettings": {
        "initial": "n = int(input('Calculate factorial of: '))\nresult = 1\nfor i in range(1, n + 1):\n    result = result * i\nprint(f'{n}! = {result}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "temperature_converter",
      "title": "Convert Celsius to Fahrenheit",
      "description": "Ask the user for a temperature in Celsius and convert it to Fahrenheit using the formula: F = (C * 9/5) + 32.",
      "difficulty": "easy",
      "tags": ["python", "arithmetic", "formulas"],
      "parsonsSettings": {
        "initial": "celsius = float(input('Temperature in Celsius: '))\nfahrenheit = (celsius * 9/5) + 32\nprint(f'{celsius}°C = {fahrenheit}°F')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "student_grade",
      "title": "Determine Letter Grade",
      "description": "Ask for a student's score (0-100) and print their letter grade: A (90+), B (80+), C (70+), D (60+), F (below 60).",
      "difficulty": "medium",
      "tags": ["python", "conditionals", "ranges"],
      "parsonsSettings": {
        "initial": "score = int(input('Enter score: '))\nif score >= 90:\n    print('Grade: A')\nelif score >= 80:\n    print('Grade: B')\nelif score >= 70:\n    print('Grade: C')\nelif score >= 60:\n    print('Grade: D')\nelse:\n    print('Grade: F')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "password_validator",
      "title": "Simple Password Validator",
      "description": "Ask the user to enter a password. Keep asking until they enter the correct password (correct = 'secret123'). Count how many attempts they made.",
      "difficulty": "medium",
      "tags": ["python", "loops", "conditionals", "counters"],
      "parsonsSettings": {
        "initial": "attempts = 0\nwhile True:\n    password = input('Enter password: ')\n    attempts = attempts + 1\n    if password == 'secret123':\n        print(f'Correct! Attempts: {attempts}')\n        break\n    else:\n        print('Wrong password, try again')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "list_average",
      "title": "Calculate Average of Numbers",
      "description": "Ask the user how many numbers they want to enter, then ask for each number and calculate the average.",
      "difficulty": "medium",
      "tags": ["python", "loops", "lists", "arithmetic"],
      "parsonsSettings": {
        "initial": "count = int(input('How many numbers? '))\ntotal = 0\nfor i in range(count):\n    num = int(input('Enter number: '))\n    total = total + num\naverage = total / count\nprint(f'Average: {average}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "fibonacci_sequence",
      "title": "Print Fibonacci Sequence",
      "description": "Print the first N numbers in the Fibonacci sequence (where each number is the sum of the two previous: 0, 1, 1, 2, 3, 5, 8, ...).",
      "difficulty": "hard",
      "tags": ["python", "loops", "variables", "sequences"],
      "parsonsSettings": {
        "initial": "n = int(input('How many Fibonacci numbers? '))\na = 0\nb = 1\nfor i in range(n):\n    print(a)\n    next_num = a + b\n    a = b\n    b = next_num",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "prime_checker",
      "title": "Check If Number Is Prime",
      "description": "Ask the user for a number and determine if it is prime (only divisible by 1 and itself).",
      "difficulty": "hard",
      "tags": ["python", "loops", "conditionals", "modulo"],
      "parsonsSettings": {
        "initial": "num = int(input('Check if prime: '))\nis_prime = True\nfor i in range(2, num):\n    if num % i == 0:\n        is_prime = False\n        break\nif is_prime and num > 1:\n    print('Prime')\nelse:\n    print('Not prime')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "list_operations",
      "title": "Find Min and Max in List",
      "description": "Ask the user to enter 5 numbers into a list, then find and print the minimum and maximum values.",
      "difficulty": "medium",
      "tags": ["python", "lists", "loops", "comparisons"],
      "parsonsSettings": {
        "initial": "numbers = []\nfor i in range(5):\n    num = int(input('Enter number: '))\n    numbers.append(num)\nmin_val = numbers[0]\nmax_val = numbers[0]\nfor num in numbers:\n    if num < min_val:\n        min_val = num\n    if num > max_val:\n        max_val = num\nprint(f'Min: {min_val}, Max: {max_val}')",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "nested_loops_grid",
      "title": "Print a Number Grid",
      "description": "Print a 3x3 grid where each cell contains the product of its row and column numbers (starting from 1).",
      "difficulty": "medium",
      "tags": ["python", "nested_loops", "multiplication"],
      "parsonsSettings": {
        "initial": "for row in range(1, 4):\n    for col in range(1, 4):\n        product = row * col\n        print(product, end=' ')\n    print()",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    },
    {
      "id": "string_repeater",
      "title": "Repeat String N Times",
      "description": "Ask the user for a string and a number N, then print that string N times on separate lines.",
      "difficulty": "easy",
      "tags": ["python", "loops", "strings"],
      "parsonsSettings": {
        "initial": "text = input('Enter text: ')\ntimes = int(input('Repeat how many times? '))\nfor i in range(times):\n    print(text)",
        "options": {
          "sortableId": "sortable",
          "trashId": "sortableTrash",
          "max_wrong_lines": 0,
          "grader": "ParsonsWidget._graders.LineBasedGrader",
          "can_indent": true,
          "x_indent": 50,
          "exec_limit": 2500,
          "feedback_cb": true,
          "show_feedback": true
        }
      }
    }
]